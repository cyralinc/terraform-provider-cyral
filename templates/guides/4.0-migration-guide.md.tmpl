---
page_title: "Cyral Terraform Provider V4 Migration Guide"
---

This guide will take you through the steps required to upgrade your Cyral Terraform provider
to MAJOR version 4. The Terraform migration can be performed on any Cyral Terraform provider with
version `2.x` or `3.x`.
The migration will be handled by an interactive Bash script.

## Why Migration is Required

Cyral Terraform Provider V4 Migration is required when upgrading a Cyral Control Plane (CP) to MAJOR version 4. Major version 4 introduces breaking changes to Cyral's repositories and repository bindings. It also introduces the concept of sidecar listeners and access gateways, which are now separate from repository bindings.

When the Cyral CP is upgraded to major version 4, the CP will automatically migrate these objects from the old
data model to the new data model, and create sidecar listener and access gateways appropriately. However, if you
are using Terraform to manage these resources, attempting to run `terraform plan` after the CP has been upgraded
will fail, due to breaking API changes and corresponding changes in the schema definitions for the resources.

In order to update your Cyral Terraform Provider V4, we have provided scripts that will remove all
`cyral_repository` and `cyral_repository_binding` resources from your Terraform state, and then import the newly
migrated versions from the Cyral CP. These scripts ensure that all resources are imported properly into your
Terraform state and configuration files.

### Resource Changes

Cyral Terraform Provider V4 introduces breaking changes to `cyral_repository` and `cyral_repository_binding` resources. The new schema defintions can be found here:
  *  [cyral_repository](https://registry.terraform.io/providers/cyralinc/cyral/latest/docs/resources/repository)
  *   [cyral_repository_binding](https://registry.terraform.io/providers/cyralinc/cyral/latest/docs/resources/repository_binding)

Cyral Terraform Provider V4 introduces [Smart Ports](https://cyral.com/docs/v4.0/sidecars/sidecar-bind-repo/#smart-ports), which let you configure multiple data repositories behind a single network port in the Cyral sidecar. This feature allows you to define multiple listener configurations for a single sidecar, with a new resource called a `cyral_sidecar_listener`. In addition, the field `sidecar_as_idp_access_gateway` of a `cyral_repository_binding` has moved to a
new resource, called a `cyral_repository_access_gateway`.

Please see the example below of how resource definitions for `cyral_repository` and `cyral_repository_binding` resources would be rewritten upon upgrading to Cyral Terraform Provider V4.

Before upgrading to Cyral Terraform Provider V4, a configuration for the resources listed above would look something
like this:

    ```
    resource "cyral_repository" "mongo_repo" {
      name = "mongo-repo"
      host = "mongodb.cyral.com"
      port = 27017
      type = "mongodb"
    }
    resource "cyral_repository_binding" "mongo_binding" {
      enabled                       = true
      repository_id                 = cyral_repository.mongo_repo.id
      sidecar_id                    = cyral_sidecar.sidecar.id
      listener_port                 = 27017
      sidecar_as_idp_access_gateway = true
    }
    ```

After upgrade, the resource definitions above would be rewritten as follows:

    ```
    resource "cyral_repository" "mongo_repo" {
      name = "mongo-repo"
      type = "mongodb"
      repo_node {
        host = "mongodb.cyral.com"
        port = 27017
      }
    }

    resource "cyral_repository_binding" "binding" {
      sidecar_id    = cyral_sidecar.sidecar.id
      repository_id = cyral_repository.mongo_repo.id
      enabled       = true
      listener_binding {
        listener_id = cyral_sidecar_listener.listener.listener_id
        node_index  = 0
      }
    }

    resource "cyral_sidecar_listener" "listener" {
      sidecar_id = cyral_sidecar.sidecar.id
      repo_types = ["mongodb"]
      network_address {
        port = 27017
      }
    }

    resource "cyral_repository_access_gateway" "access_gateway" {
      repository_id = cyral_repository.mongo_repo.id
      sidecar_id    = cyral_sidecar.sidecar.id
      binding_id    = cyral_repository_binding.binding.binding_id
    }
    ```

## Data sources

The `cyral_repository` data source output contains breaking changes. The new schema can be found [here](https://registry.terraform.io/providers/cyralinc/cyral/latest/docs/data-sources/repository). Please note that if you have any output blocks configured
for `cyral_repository` data sources, you will need to rewrite them after migration is completed.

## Migrating to Cyral Terraform Provider to 4.0

The following sections contain step-by-step instructions on how to migrate the Cyral Terraform Provider
to version 4.0.

### Migrating from 3.X to 4.0

The following steps should be taken to upgrade the Cyral CP and the Cyral Terraform provider:

1. **Before upgrading the CP to V4**, please run `terraform apply` to ensure your Terraform state is up-to-date.

2. Upgrade the Cyral CP to MAJOR version 4.

3. Remove all `cyral_repository` data source output blocks. If you have any output blocks configured
for `cyral_repository` data sources, you will need to rewrite them based on the new schema after
migration is completed.

4. Run the Cyral Terraform Provider [V4 Migration Script](https://github.com/cyralinc/terraform-provider-cyral/tree/main/scripts/4.0-migration.sh) after upgrading
the Cyral CP to MAJOR version 4.

~> **WARNING** It is essential that the Cyral Terraform Provider V4 Migration is run **after** the CP has been upgraded.

### Migrating from 2.X to 4.0

The following steps should be taken to upgrade the Cyral CP and the Cyral Terraform provider:

1. **Before upgrading the CP to V4**, please run `terraform apply` to ensure your Terraform state is up-to-date.

2. Upgrade the Cyral CP to MAJOR version 4.

3. Remove all `cyral_repository` data source output blocks. If you have any output blocks configured
for `cyral_repository` data sources, you will need to rewrite them based on the new schema after
migration is completed.

4. Run the Cyral Terraform Provider [V2-V4 Migration Script](https://github.com/cyralinc/terraform-provider-cyral/tree/main/scripts/2.X-4.0-migration.sh) after upgrading
the Cyral CP to MAJOR version 4.

~> **WARNING** It is essential that the Cyral Terraform Provider V2-V4 Migration is run **after** the CP has been upgraded.

## Prerequisites

The Cyral Terraform Provider V4 Migration requires the following tools:

  * Bash Version 4 or higher. The script will check your $BASH_VERSION environment variable, and exit if it is not set to a version 4.0 or higher.

  * Terraform CLI. Download instructions can be found [here](https://learn.hashicorp.com/tutorials/terraform/install-cli).

  * JQ. Download instructions can be found [here](https://stedolan.github.io/jq/download/).

The script will exit if either of these tools are not installed.

## Notes

1. This script requires permissions sufficient for creating files. Please ensure that the script has the required permissions before running it.

2. This script will append empty resource definitions to the end of your .tf file. Apart from that, it will not modify the resource definitions
   currently in your .tf file in any way. However, it will ask you to manually bump the Cyral Provider version halfway through the script.
   It will also ask you to manually remove both the empty resource definitions it appended to your .tf file, as well as all resource definitions
   for resources that are no longer supported.

3. Please carefully read all of the prompts that appear throughout the script.

## Running the Script

Cyral Terraform Provider **V3 to V4 Migration** script can be found [here](https://github.com/cyralinc/terraform-provider-cyral/tree/main/scripts/4.0-migration.sh).

Cyral Terraform Provider **V2 to V4 Migration** script can be found [here](https://github.com/cyralinc/terraform-provider-cyral/tree/main/scripts/2.X-4.0-migration.sh).

These scripts will create a backup of your Terraform state before attempting to upgrade your Cyral Terraform provider and performing the migration.
If migration fails, you will have the option to revert to the Terraform state that was present before running the script, so that you can try again.

In order to run the script, please perform the following actions:

1.  Download the script and copy it into the directory containing the Terraform module you wish to migrate.

2.  Run the migration script (*make sure the script has the required permissions as mentioned*). Please read all instructions carefully while interacting with the script.

3.  If migration failed, follow the prompts in the script to revert back to the previous state. Inspect the errors, and try again.

## Troubleshooting

If migration failed for one or two resources, do the following.

1.  Revert to the previous state by following the prompts at the end of the migration script.
2.  Manually remove the problematic resources from your .tf file, and copy them elsewhere.
3.  Run the migration script again.
4.  Once the script is finished, recreate the problematic resources using the new resource schema.
